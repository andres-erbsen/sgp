// Code generated by protoc-gen-go.
// source: sgp.proto
// DO NOT EDIT!

package sgp

import proto "code.google.com/p/goprotobuf/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type PkEncAlgo int32

const (
	PkEncAlgo_NACL PkEncAlgo = 1
)

var PkEncAlgo_name = map[int32]string{
	1: "NACL",
}
var PkEncAlgo_value = map[string]int32{
	"NACL": 1,
}

func (x PkEncAlgo) Enum() *PkEncAlgo {
	p := new(PkEncAlgo)
	*p = x
	return p
}
func (x PkEncAlgo) String() string {
	return proto.EnumName(PkEncAlgo_name, int32(x))
}
func (x PkEncAlgo) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *PkEncAlgo) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PkEncAlgo_value, data, "PkEncAlgo")
	if err != nil {
		return err
	}
	*x = PkEncAlgo(value)
	return nil
}

type SigAlgo int32

const (
	SigAlgo_ED25519 SigAlgo = 1
)

var SigAlgo_name = map[int32]string{
	1: "ED25519",
}
var SigAlgo_value = map[string]int32{
	"ED25519": 1,
}

func (x SigAlgo) Enum() *SigAlgo {
	p := new(SigAlgo)
	*p = x
	return p
}
func (x SigAlgo) String() string {
	return proto.EnumName(SigAlgo_name, int32(x))
}
func (x SigAlgo) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *SigAlgo) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SigAlgo_value, data, "SigAlgo")
	if err != nil {
		return err
	}
	*x = SigAlgo(value)
	return nil
}

type Boxed struct {
	EncAlgo          *PkEncAlgo `protobuf:"varint,1,opt,name=enc_algo,enum=PkEncAlgo" json:"enc_algo,omitempty"`
	Sender           []byte     `protobuf:"bytes,2,opt,name=sender" json:"sender,omitempty"`
	RecipientKeyid   []byte     `protobuf:"bytes,3,opt,name=recipient_keyid" json:"recipient_keyid,omitempty"`
	Data             []byte     `protobuf:"bytes,4,req,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *Boxed) Reset()         { *m = Boxed{} }
func (m *Boxed) String() string { return proto.CompactTextString(m) }
func (*Boxed) ProtoMessage()    {}

func (m *Boxed) GetEncAlgo() PkEncAlgo {
	if m != nil && m.EncAlgo != nil {
		return *m.EncAlgo
	}
	return 0
}

func (m *Boxed) GetSender() []byte {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *Boxed) GetRecipientKeyid() []byte {
	if m != nil {
		return m.RecipientKeyid
	}
	return nil
}

func (m *Boxed) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Signed struct {
	Message          []byte    `protobuf:"bytes,1,req,name=message" json:"message,omitempty"`
	SigAlgos         []SigAlgo `protobuf:"varint,2,rep,name=sig_algos,enum=SigAlgo" json:"sig_algos,omitempty"`
	SigKeyids        [][]byte  `protobuf:"bytes,3,rep,name=sig_keyids" json:"sig_keyids,omitempty"`
	Sigs             [][]byte  `protobuf:"bytes,4,rep,name=sigs" json:"sigs,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Signed) Reset()         { *m = Signed{} }
func (m *Signed) String() string { return proto.CompactTextString(m) }
func (*Signed) ProtoMessage()    {}

func (m *Signed) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Signed) GetSigAlgos() []SigAlgo {
	if m != nil {
		return m.SigAlgos
	}
	return nil
}

func (m *Signed) GetSigKeyids() [][]byte {
	if m != nil {
		return m.SigKeyids
	}
	return nil
}

func (m *Signed) GetSigs() [][]byte {
	if m != nil {
		return m.Sigs
	}
	return nil
}

// PublicKeyData is usually found in a Signed message, forming PublicKey
type PublicKeyData struct {
	SigAlgos         []SigAlgo   `protobuf:"varint,1,rep,name=sig_algos,enum=SigAlgo" json:"sig_algos,omitempty"`
	EncAlgos         []PkEncAlgo `protobuf:"varint,2,rep,name=enc_algos,enum=PkEncAlgo" json:"enc_algos,omitempty"`
	SigKeys          [][]byte    `protobuf:"bytes,3,rep,name=sig_keys" json:"sig_keys,omitempty"`
	EncKeys          [][]byte    `protobuf:"bytes,4,rep,name=enc_keys" json:"enc_keys,omitempty"`
	Time             *int64      `protobuf:"varint,5,opt,name=time" json:"time,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *PublicKeyData) Reset()         { *m = PublicKeyData{} }
func (m *PublicKeyData) String() string { return proto.CompactTextString(m) }
func (*PublicKeyData) ProtoMessage()    {}

func (m *PublicKeyData) GetSigAlgos() []SigAlgo {
	if m != nil {
		return m.SigAlgos
	}
	return nil
}

func (m *PublicKeyData) GetEncAlgos() []PkEncAlgo {
	if m != nil {
		return m.EncAlgos
	}
	return nil
}

func (m *PublicKeyData) GetSigKeys() [][]byte {
	if m != nil {
		return m.SigKeys
	}
	return nil
}

func (m *PublicKeyData) GetEncKeys() [][]byte {
	if m != nil {
		return m.EncKeys
	}
	return nil
}

func (m *PublicKeyData) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

// Attribution is usually found in a Signed message, forming Certification
type Attribution struct {
	// Either
	SigAlgo          *SigAlgo   `protobuf:"varint,1,opt,name=sig_algo,enum=SigAlgo" json:"sig_algo,omitempty"`
	EncAlgo          *PkEncAlgo `protobuf:"varint,2,opt,name=enc_algo,enum=PkEncAlgo" json:"enc_algo,omitempty"`
	Pubkey           []byte     `protobuf:"bytes,3,req,name=pubkey" json:"pubkey,omitempty"`
	Name             []byte     `protobuf:"bytes,4,req,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *Attribution) Reset()         { *m = Attribution{} }
func (m *Attribution) String() string { return proto.CompactTextString(m) }
func (*Attribution) ProtoMessage()    {}

func (m *Attribution) GetSigAlgo() SigAlgo {
	if m != nil && m.SigAlgo != nil {
		return *m.SigAlgo
	}
	return 0
}

func (m *Attribution) GetEncAlgo() PkEncAlgo {
	if m != nil && m.EncAlgo != nil {
		return *m.EncAlgo
	}
	return 0
}

func (m *Attribution) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *Attribution) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func init() {
	proto.RegisterEnum("PkEncAlgo", PkEncAlgo_name, PkEncAlgo_value)
	proto.RegisterEnum("SigAlgo", SigAlgo_name, SigAlgo_value)
}
